import parselmouth
import pyloudnorm as pyln
import soundfile as sf
import matplotlib.pyplot as plt
import numpy

audioFileName = "voice"
#audioFilePath = r"C:\Users\adars\AppData\Local\Programs\Python\Python311\NexGen_hackathon_test\audioFiles\voice.wav" #give absolute path for this
#path = r"C:\Users\adars\AppData\Local\Programs\Python\Python311\NexGen_hackathon_test\audioFiles" #give absolute path for this

praatFilePath = r"parseTextGrid.praat"

def plotAudio(audioFilePath,path):
    snd = parselmouth.Sound(audioFilePath)
    soundDataFilePath = r"audioFiles\\" + audioFileName + r".txt"
    snd.save_as_text_file(file_path=soundDataFilePath)
    plt.plot(snd.xs(),snd.values.T)
    plt.savefig(audioFileName+".png")
    # plt.show()

def run_praat_file(audioFilePath,path):
    try:
        data = parselmouth.praat.run_file(praatFilePath, -20, 2, 0.3, "yes",audioFilePath,path, 50, 400, 0.01, capture_output=True)
        # print(data[0]) #parselmouth.Sound object
        z1 = str(data[1])
        z2 = z1.strip().split()
        # print(z2)
        return z2
    except:
        print("Audio was not clear")

def readAudioData(audioFilePath,path):
    snd = parselmouth.Sound(audioFilePath)
    soundDataFilePath = r"audioFiles\\" + audioFileName + r".txt"
    snd.save_as_text_file(file_path=soundDataFilePath)
    print(numpy.max(snd.values.T))
    

def rateOfSpeed(audioFilePath,path):
    try:
        data = run_praat_file(audioFilePath,path)
        sylPerSec = int(data[2])
        print(sylPerSec,"syl/sec") #returns number of syllables per second
        if(sylPerSec != 4 and sylPerSec != 5):
            if(sylPerSec < 4):
                print("Try speaking faster.")
            else:
                print("Try speaking slowly.")
        return sylPerSec
    except:
        print("Could not find the number of syllables spoken per second, upload a different file.")
        return -1

def numOfSyl(audioFilePath,path):
    try:
        data = run_praat_file(audioFilePath,path)
        nSyl = int(data[0])
        return nSyl
    except:
        print("Could not find number of syllables, upload a different file.")
        return -1

def numOfPauses(audioFilePath,path):
    try:
        data = run_praat_file(audioFilePath,path)
        nPauses = int(data[1])
        print("Number of pauses =",nPauses)
        return nPauses
    except:
        print("Could not find number of pauses, upload a different file.")
        return -1

def getLoudness(audioFilePath,path):
    data,rate = sf.read(audioFilePath)
    peak_normalized_audio = pyln.normalize.peak(data, -1.0)
    meter = pyln.Meter(rate)
    loudness = meter.integrated_loudness(data)

    print("Loudness:",peak_normalized_audio)
    if(loudness < -10):
        print("Try speaking louder.")
    elif(loudness > 10):
        print("Try speaking softly.")

def readTextGrid(audioFilePath,path): #reads the TextGrid generated by the run_praat_file function
    soundDataFilePath = r"audioFiles\\" + audioFileName + r".TextGrid"
    with open(soundDataFilePath,'r') as f:
        data = f.readlines()

    #treating the TextGrid file as a text file
    nSyl = numOfSyl(audioFilePath,path)
    fileStart = 14 + (nSyl*3) + 6
    longPauses = []
    for i in range(fileStart,len(data)):
        words = data[i].strip().split()
        if(words[0] == "text"):
            if(words[2] == '"silent"'):
                difference = float(data[i-1].strip().split()[2]) - float(data[i-2].strip().split()[2])
                if(difference > 0.75):
                    longPauses.append([float(data[i-1].strip().split()[2]),float(data[i-2].strip().split()[2])])
                    # print(float(data[i-1].strip().split()[2]),float(data[i-2].strip().split()[2]))
    if(len(longPauses) > 0):
        for pauses in longPauses:
            print("Long pauses occur at:",pauses[1],"till",pauses[0])


# readAudioData()
# run_praat_file()
# plotAudio()
# rateOfSpeed()
# numOfPauses()
# getLoudness()

#readTextGrid()
